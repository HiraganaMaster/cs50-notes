#include <stdio.h>
#include <cs50.h>
#include <math.h>

// 3 functions required for main to call
// This forces a positive value input from user according to 'get_long' parameters
long get_card_number(void);
// This checks the length of the card number input by the user. If it evaluates to false, only INVALID can be shown
int input_length_validation(long input);
// This checks the card number for validity against Luhn's MOD 10 algorithm
bool Luhn_validation(long input);

int main(void)
{
    long card_number = get_card_number();
    int length = input_length_validation(card_number);
    bool valid = Luhn_validation(card_number);
    // use boolean expressions to test validation of both card length & card validity to specify card type
    if (length == 1 && valid)
    {
        printf("MASTERCARD\n");
    }
    else if (length == 2 && valid)
    {
        printf("VISA\n");
    }
    else if (length == 3 && valid)
    {
        printf("AMEX\n");
    }
    else 
    {
        printf("INVALID\n");
    }
    return 0;
}

long get_card_number(void)
{
    long l;
    do
    {
        l = get_long("Number: ");
    }
    while (l < 0);
    return l;
}

int input_length_validation(long input)
{
    // using math.h file we can use pow to return the long type value of the base (10) raised to the exponent (12, 13, & 14)
    long a = pow(10, 14);
    long b = pow(10, 13);
    long c = pow(10, 12);
    // Mastercard 16, 51 - 55
    if (input / a > 50 && input / a < 56)
    {
        return 1;
    }
    // Visa 16 & 14, 40 - 49
    else if ((input / a >= 40 && input / a < 50) || (input / c >= 40 && input / c < 50))
    {
        return 2;
    }
    // Amex 15, 34 & 37
    else if (input / b == 34 || input / b == 37)
    {
        return 3;
    }
    else
    {
        return 0;
    }
}

bool Luhn_validation(long input) 
{
    long a = 0, b = 0, c = 0, d = 0;
    while (input > 0)
    {
        // take last digit and save to a
        a += (input % 10);
        input /= 10;
        // take next digit
        b = (input % 10);
        // if digit * 2 is > 10, split into two digits and save both to d
        b = b * 2;
        c = b % 10;
        b = b / 10;
        d += b + c;
        input /= 10;
    }
    int e = a + d;
    if (e % 10 == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
